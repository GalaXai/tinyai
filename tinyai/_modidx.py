# Autogenerated by nbdev

d = { 'settings': { 'branch': 'Main',
                'doc_baseurl': '/tinyai',
                'doc_host': 'https://GalaxUniv.github.io',
                'git_url': 'https://github.com/GalaxUniv/tinyai',
                'lib_path': 'tinyai'},
  'syms': { 'tinyai.accel': { 'tinyai.accel.AccelerateCB': ('ddpmv2.html#acceleratecb', 'tinyai/accel.py'),
                              'tinyai.accel.AccelerateCB.__init__': ('ddpmv2.html#__init__', 'tinyai/accel.py'),
                              'tinyai.accel.AccelerateCB.backward': ('ddpmv2.html#backward', 'tinyai/accel.py'),
                              'tinyai.accel.AccelerateCB.before_fit': ('ddpmv2.html#before_fit', 'tinyai/accel.py'),
                              'tinyai.accel.MixedPrecision': ('ddpmv2.html#mixedprecision', 'tinyai/accel.py'),
                              'tinyai.accel.MixedPrecision.after_loss': ('ddpmv2.html#after_loss', 'tinyai/accel.py'),
                              'tinyai.accel.MixedPrecision.backward': ('ddpmv2.html#backward', 'tinyai/accel.py'),
                              'tinyai.accel.MixedPrecision.before_batch': ('ddpmv2.html#before_batch', 'tinyai/accel.py'),
                              'tinyai.accel.MixedPrecision.before_fit': ('ddpmv2.html#before_fit', 'tinyai/accel.py'),
                              'tinyai.accel.MixedPrecision.step': ('ddpmv2.html#step', 'tinyai/accel.py')},
            'tinyai.activations': { 'tinyai.activations.ActivationStats': ('activations.html#activationstats', 'tinyai/activations.py'),
                                    'tinyai.activations.ActivationStats.__init__': ('activations.html#__init__', 'tinyai/activations.py'),
                                    'tinyai.activations.ActivationStats.color_dim': ('activations.html#color_dim', 'tinyai/activations.py'),
                                    'tinyai.activations.ActivationStats.dead_chart': ( 'activations.html#dead_chart',
                                                                                       'tinyai/activations.py'),
                                    'tinyai.activations.ActivationStats.plot_stats': ( 'activations.html#plot_stats',
                                                                                       'tinyai/activations.py'),
                                    'tinyai.activations.Hook': ('activations.html#hook', 'tinyai/activations.py'),
                                    'tinyai.activations.Hook.__del__': ('activations.html#__del__', 'tinyai/activations.py'),
                                    'tinyai.activations.Hook.__init__': ('activations.html#__init__', 'tinyai/activations.py'),
                                    'tinyai.activations.Hook.remove': ('activations.html#remove', 'tinyai/activations.py'),
                                    'tinyai.activations.Hooks': ('activations.html#hooks', 'tinyai/activations.py'),
                                    'tinyai.activations.Hooks.__del__': ('activations.html#__del__', 'tinyai/activations.py'),
                                    'tinyai.activations.Hooks.__delitem__': ('activations.html#__delitem__', 'tinyai/activations.py'),
                                    'tinyai.activations.Hooks.__enter__': ('activations.html#__enter__', 'tinyai/activations.py'),
                                    'tinyai.activations.Hooks.__exit__': ('activations.html#__exit__', 'tinyai/activations.py'),
                                    'tinyai.activations.Hooks.__init__': ('activations.html#__init__', 'tinyai/activations.py'),
                                    'tinyai.activations.Hooks.remove': ('activations.html#remove', 'tinyai/activations.py'),
                                    'tinyai.activations.HooksCallback': ('activations.html#hookscallback', 'tinyai/activations.py'),
                                    'tinyai.activations.HooksCallback.__init__': ('activations.html#__init__', 'tinyai/activations.py'),
                                    'tinyai.activations.HooksCallback.__iter__': ('activations.html#__iter__', 'tinyai/activations.py'),
                                    'tinyai.activations.HooksCallback.__len__': ('activations.html#__len__', 'tinyai/activations.py'),
                                    'tinyai.activations.HooksCallback._hookfunc': ('activations.html#_hookfunc', 'tinyai/activations.py'),
                                    'tinyai.activations.HooksCallback.after_fit': ('activations.html#after_fit', 'tinyai/activations.py'),
                                    'tinyai.activations.HooksCallback.before_fit': ('activations.html#before_fit', 'tinyai/activations.py'),
                                    'tinyai.activations.append_stats': ('activations.html#append_stats', 'tinyai/activations.py'),
                                    'tinyai.activations.get_hist': ('activations.html#get_hist', 'tinyai/activations.py'),
                                    'tinyai.activations.get_min': ('activations.html#get_min', 'tinyai/activations.py'),
                                    'tinyai.activations.set_seed': ('activations.html#set_seed', 'tinyai/activations.py')},
            'tinyai.augment': { 'tinyai.augment.CapturePreds': ('augment.html#capturepreds', 'tinyai/augment.py'),
                                'tinyai.augment.CapturePreds.after_batch': ('augment.html#after_batch', 'tinyai/augment.py'),
                                'tinyai.augment.CapturePreds.after_fit': ('augment.html#after_fit', 'tinyai/augment.py'),
                                'tinyai.augment.CapturePreds.before_fit': ('augment.html#before_fit', 'tinyai/augment.py'),
                                'tinyai.augment.RandCopy': ('augment.html#randcopy', 'tinyai/augment.py'),
                                'tinyai.augment.RandCopy.__init__': ('augment.html#__init__', 'tinyai/augment.py'),
                                'tinyai.augment.RandCopy.forward': ('augment.html#forward', 'tinyai/augment.py'),
                                'tinyai.augment.RandErase': ('augment.html#randerase', 'tinyai/augment.py'),
                                'tinyai.augment.RandErase.__init__': ('augment.html#__init__', 'tinyai/augment.py'),
                                'tinyai.augment.RandErase.forward': ('augment.html#forward', 'tinyai/augment.py'),
                                'tinyai.augment._flops': ('augment.html#_flops', 'tinyai/augment.py'),
                                'tinyai.augment._rand_copy1': ('augment.html#_rand_copy1', 'tinyai/augment.py'),
                                'tinyai.augment._rand_erase1': ('augment.html#_rand_erase1', 'tinyai/augment.py'),
                                'tinyai.augment.capture_preds': ('augment.html#capture_preds', 'tinyai/augment.py'),
                                'tinyai.augment.rand_copy': ('augment.html#rand_copy', 'tinyai/augment.py'),
                                'tinyai.augment.rand_erase': ('augment.html#rand_erase', 'tinyai/augment.py'),
                                'tinyai.augment.show_image_batch': ('augment.html#show_image_batch', 'tinyai/augment.py'),
                                'tinyai.augment.summary': ('augment.html#summary', 'tinyai/augment.py')},
            'tinyai.conv': { 'tinyai.conv.collate_device': ('convolutions.html#collate_device', 'tinyai/conv.py'),
                             'tinyai.conv.conv': ('convolutions.html#conv', 'tinyai/conv.py'),
                             'tinyai.conv.to_device': ('convolutions.html#to_device', 'tinyai/conv.py')},
            'tinyai.datasets': { 'tinyai.datasets.DataLoaders': ('datasets.html#dataloaders', 'tinyai/datasets.py'),
                                 'tinyai.datasets.DataLoaders.__init__': ('datasets.html#__init__', 'tinyai/datasets.py'),
                                 'tinyai.datasets.DataLoaders.from_dd': ('datasets.html#from_dd', 'tinyai/datasets.py'),
                                 'tinyai.datasets.collate_dict': ('datasets.html#collate_dict', 'tinyai/datasets.py'),
                                 'tinyai.datasets.get_grid': ('datasets.html#get_grid', 'tinyai/datasets.py'),
                                 'tinyai.datasets.inplace': ('datasets.html#inplace', 'tinyai/datasets.py'),
                                 'tinyai.datasets.show_image': ('datasets.html#show_image', 'tinyai/datasets.py'),
                                 'tinyai.datasets.show_images': ('datasets.html#show_images', 'tinyai/datasets.py'),
                                 'tinyai.datasets.subplots': ('datasets.html#subplots', 'tinyai/datasets.py')},
            'tinyai.init': { 'tinyai.init.BatchTransformCB': ('initializing.html#batchtransformcb', 'tinyai/init.py'),
                             'tinyai.init.BatchTransformCB.__init__': ('initializing.html#__init__', 'tinyai/init.py'),
                             'tinyai.init.BatchTransformCB.before_batch': ('initializing.html#before_batch', 'tinyai/init.py'),
                             'tinyai.init.GeneralRelu': ('initializing.html#generalrelu', 'tinyai/init.py'),
                             'tinyai.init.GeneralRelu.__init__': ('initializing.html#__init__', 'tinyai/init.py'),
                             'tinyai.init.GeneralRelu.forward': ('initializing.html#forward', 'tinyai/init.py'),
                             'tinyai.init._lsuv_stats': ('initializing.html#_lsuv_stats', 'tinyai/init.py'),
                             'tinyai.init.clean_ipython_hist': ('initializing.html#clean_ipython_hist', 'tinyai/init.py'),
                             'tinyai.init.clean_mem': ('initializing.html#clean_mem', 'tinyai/init.py'),
                             'tinyai.init.clean_tb': ('initializing.html#clean_tb', 'tinyai/init.py'),
                             'tinyai.init.conv': ('initializing.html#conv', 'tinyai/init.py'),
                             'tinyai.init.get_model': ('initializing.html#get_model', 'tinyai/init.py'),
                             'tinyai.init.init_weights': ('initializing.html#init_weights', 'tinyai/init.py'),
                             'tinyai.init.lsuv_init': ('initializing.html#lsuv_init', 'tinyai/init.py'),
                             'tinyai.init.plot_func': ('initializing.html#plot_func', 'tinyai/init.py')},
            'tinyai.learner': { 'tinyai.learner.Callback': ('learner.html#callback', 'tinyai/learner.py'),
                                'tinyai.learner.CancelBatchException': ('learner.html#cancelbatchexception', 'tinyai/learner.py'),
                                'tinyai.learner.CancelEpochException': ('learner.html#cancelepochexception', 'tinyai/learner.py'),
                                'tinyai.learner.CancelFitException': ('learner.html#cancelfitexception', 'tinyai/learner.py'),
                                'tinyai.learner.DeviceCB': ('learner.html#devicecb', 'tinyai/learner.py'),
                                'tinyai.learner.DeviceCB.__init__': ('learner.html#__init__', 'tinyai/learner.py'),
                                'tinyai.learner.DeviceCB.before_batch': ('learner.html#before_batch', 'tinyai/learner.py'),
                                'tinyai.learner.DeviceCB.before_fit': ('learner.html#before_fit', 'tinyai/learner.py'),
                                'tinyai.learner.LRFinderCB': ('learner.html#lrfindercb', 'tinyai/learner.py'),
                                'tinyai.learner.LRFinderCB.__init__': ('learner.html#__init__', 'tinyai/learner.py'),
                                'tinyai.learner.LRFinderCB.after_batch': ('learner.html#after_batch', 'tinyai/learner.py'),
                                'tinyai.learner.LRFinderCB.before_fit': ('learner.html#before_fit', 'tinyai/learner.py'),
                                'tinyai.learner.LRFinderCB.cleanup_fit': ('learner.html#cleanup_fit', 'tinyai/learner.py'),
                                'tinyai.learner.Learner': ('learner.html#learner', 'tinyai/learner.py'),
                                'tinyai.learner.Learner.__getattr__': ('learner.html#__getattr__', 'tinyai/learner.py'),
                                'tinyai.learner.Learner.__init__': ('learner.html#__init__', 'tinyai/learner.py'),
                                'tinyai.learner.Learner._fit': ('learner.html#_fit', 'tinyai/learner.py'),
                                'tinyai.learner.Learner._one_batch': ('learner.html#_one_batch', 'tinyai/learner.py'),
                                'tinyai.learner.Learner._one_epoch': ('learner.html#_one_epoch', 'tinyai/learner.py'),
                                'tinyai.learner.Learner.callback': ('learner.html#callback', 'tinyai/learner.py'),
                                'tinyai.learner.Learner.fit': ('learner.html#fit', 'tinyai/learner.py'),
                                'tinyai.learner.Learner.one_epoch': ('learner.html#one_epoch', 'tinyai/learner.py'),
                                'tinyai.learner.Learner.training': ('learner.html#training', 'tinyai/learner.py'),
                                'tinyai.learner.MetricsCB': ('learner.html#metricscb', 'tinyai/learner.py'),
                                'tinyai.learner.MetricsCB.__init__': ('learner.html#__init__', 'tinyai/learner.py'),
                                'tinyai.learner.MetricsCB._log': ('learner.html#_log', 'tinyai/learner.py'),
                                'tinyai.learner.MetricsCB.after_batch': ('learner.html#after_batch', 'tinyai/learner.py'),
                                'tinyai.learner.MetricsCB.after_epoch': ('learner.html#after_epoch', 'tinyai/learner.py'),
                                'tinyai.learner.MetricsCB.before_epoch': ('learner.html#before_epoch', 'tinyai/learner.py'),
                                'tinyai.learner.MetricsCB.before_fit': ('learner.html#before_fit', 'tinyai/learner.py'),
                                'tinyai.learner.MomentumLearner': ('learner.html#momentumlearner', 'tinyai/learner.py'),
                                'tinyai.learner.MomentumLearner.__init__': ('learner.html#__init__', 'tinyai/learner.py'),
                                'tinyai.learner.MomentumLearner.zero_grad': ('learner.html#zero_grad', 'tinyai/learner.py'),
                                'tinyai.learner.ProgressCB': ('learner.html#progresscb', 'tinyai/learner.py'),
                                'tinyai.learner.ProgressCB.__init__': ('learner.html#__init__', 'tinyai/learner.py'),
                                'tinyai.learner.ProgressCB._log': ('learner.html#_log', 'tinyai/learner.py'),
                                'tinyai.learner.ProgressCB.after_batch': ('learner.html#after_batch', 'tinyai/learner.py'),
                                'tinyai.learner.ProgressCB.after_epoch': ('learner.html#after_epoch', 'tinyai/learner.py'),
                                'tinyai.learner.ProgressCB.before_epoch': ('learner.html#before_epoch', 'tinyai/learner.py'),
                                'tinyai.learner.ProgressCB.before_fit': ('learner.html#before_fit', 'tinyai/learner.py'),
                                'tinyai.learner.SingleBatchCB': ('learner.html#singlebatchcb', 'tinyai/learner.py'),
                                'tinyai.learner.SingleBatchCB.after_batch': ('learner.html#after_batch', 'tinyai/learner.py'),
                                'tinyai.learner.TrainCB': ('learner.html#traincb', 'tinyai/learner.py'),
                                'tinyai.learner.TrainCB.__init__': ('learner.html#__init__', 'tinyai/learner.py'),
                                'tinyai.learner.TrainCB.backward': ('learner.html#backward', 'tinyai/learner.py'),
                                'tinyai.learner.TrainCB.get_loss': ('learner.html#get_loss', 'tinyai/learner.py'),
                                'tinyai.learner.TrainCB.predict': ('learner.html#predict', 'tinyai/learner.py'),
                                'tinyai.learner.TrainCB.step': ('learner.html#step', 'tinyai/learner.py'),
                                'tinyai.learner.TrainCB.zero_grad': ('learner.html#zero_grad', 'tinyai/learner.py'),
                                'tinyai.learner.TrainLearner': ('learner.html#trainlearner', 'tinyai/learner.py'),
                                'tinyai.learner.TrainLearner.backward': ('learner.html#backward', 'tinyai/learner.py'),
                                'tinyai.learner.TrainLearner.get_loss': ('learner.html#get_loss', 'tinyai/learner.py'),
                                'tinyai.learner.TrainLearner.predict': ('learner.html#predict', 'tinyai/learner.py'),
                                'tinyai.learner.TrainLearner.step': ('learner.html#step', 'tinyai/learner.py'),
                                'tinyai.learner.TrainLearner.zero_grad': ('learner.html#zero_grad', 'tinyai/learner.py'),
                                'tinyai.learner.lr_find': ('learner.html#lr_find', 'tinyai/learner.py'),
                                'tinyai.learner.run_cbs': ('learner.html#run_cbs', 'tinyai/learner.py'),
                                'tinyai.learner.to_cpu': ('learner.html#to_cpu', 'tinyai/learner.py'),
                                'tinyai.learner.with_cbs': ('learner.html#with_cbs', 'tinyai/learner.py'),
                                'tinyai.learner.with_cbs.__call__': ('learner.html#__call__', 'tinyai/learner.py'),
                                'tinyai.learner.with_cbs.__init__': ('learner.html#__init__', 'tinyai/learner.py')},
            'tinyai.resnet': { 'tinyai.resnet.ResBlock': ('resnet.html#resblock', 'tinyai/resnet.py'),
                               'tinyai.resnet.ResBlock.__init__': ('resnet.html#__init__', 'tinyai/resnet.py'),
                               'tinyai.resnet.ResBlock.forward': ('resnet.html#forward', 'tinyai/resnet.py'),
                               'tinyai.resnet._conv_block': ('resnet.html#_conv_block', 'tinyai/resnet.py')},
            'tinyai.sgd': { 'tinyai.sgd.BaseSchedCB': ('accel_sgd.html#baseschedcb', 'tinyai/sgd.py'),
                            'tinyai.sgd.BaseSchedCB.__init__': ('accel_sgd.html#__init__', 'tinyai/sgd.py'),
                            'tinyai.sgd.BaseSchedCB._step': ('accel_sgd.html#_step', 'tinyai/sgd.py'),
                            'tinyai.sgd.BaseSchedCB.before_fit': ('accel_sgd.html#before_fit', 'tinyai/sgd.py'),
                            'tinyai.sgd.BatchSchedCB': ('accel_sgd.html#batchschedcb', 'tinyai/sgd.py'),
                            'tinyai.sgd.BatchSchedCB.after_batch': ('accel_sgd.html#after_batch', 'tinyai/sgd.py'),
                            'tinyai.sgd.EpochSchedCB': ('accel_sgd.html#epochschedcb', 'tinyai/sgd.py'),
                            'tinyai.sgd.EpochSchedCB.after_epoch': ('accel_sgd.html#after_epoch', 'tinyai/sgd.py'),
                            'tinyai.sgd.HasLearnCB': ('accel_sgd.html#haslearncb', 'tinyai/sgd.py'),
                            'tinyai.sgd.HasLearnCB.after_fit': ('accel_sgd.html#after_fit', 'tinyai/sgd.py'),
                            'tinyai.sgd.HasLearnCB.before_fit': ('accel_sgd.html#before_fit', 'tinyai/sgd.py'),
                            'tinyai.sgd.RecorderCB': ('accel_sgd.html#recordercb', 'tinyai/sgd.py'),
                            'tinyai.sgd.RecorderCB.__init__': ('accel_sgd.html#__init__', 'tinyai/sgd.py'),
                            'tinyai.sgd.RecorderCB.after_batch': ('accel_sgd.html#after_batch', 'tinyai/sgd.py'),
                            'tinyai.sgd.RecorderCB.before_fit': ('accel_sgd.html#before_fit', 'tinyai/sgd.py'),
                            'tinyai.sgd.RecorderCB.plot': ('accel_sgd.html#plot', 'tinyai/sgd.py')},
            'tinyai.training': { 'tinyai.training.Dataset': ('minibatch_training.html#dataset', 'tinyai/training.py'),
                                 'tinyai.training.Dataset.__getitem__': ('minibatch_training.html#__getitem__', 'tinyai/training.py'),
                                 'tinyai.training.Dataset.__init__': ('minibatch_training.html#__init__', 'tinyai/training.py'),
                                 'tinyai.training.Dataset.__len__': ('minibatch_training.html#__len__', 'tinyai/training.py'),
                                 'tinyai.training.accuracy': ('minibatch_training.html#accuracy', 'tinyai/training.py'),
                                 'tinyai.training.fit': ('minibatch_training.html#fit', 'tinyai/training.py'),
                                 'tinyai.training.get_dls': ('minibatch_training.html#get_dls', 'tinyai/training.py'),
                                 'tinyai.training.report': ('minibatch_training.html#report', 'tinyai/training.py')}}}